// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp_ExcelFileProcessor.Data;

namespace WebApp_ExcelFileProcessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210916080514_addStudentScreeningTables")]
    partial class addStudentScreeningTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ba566e0f-3d52-4967-a62c-1965b9f1e251",
                            ConcurrencyStamp = "b83bcb0f-3653-4678-b86e-09b9258edfb0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1b824f5d-01b1-411b-8e44-5b05003ef81e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11c3c424-9500-43cf-b745-3ffa81ee2be7",
                            Email = "admin@fileprocessor.co.za",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FILEPROCESSOR.CO.ZA",
                            NormalizedUserName = "MYUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAED425aqLaATyYeSJ4KVwdGoih6/tnfri0ABucxgiHZjkVXGXVS2hYHAzJNkAsrX4ew==",
                            PhoneNumber = "0413743172",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9b61e40b-0211-4f8d-98d2-56eb24f6c61f",
                            TwoFactorEnabled = false,
                            UserName = "myuser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1b824f5d-01b1-411b-8e44-5b05003ef81e",
                            RoleId = "ba566e0f-3d52-4967-a62c-1965b9f1e251"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Gender", b =>
                {
                    b.Property<Guid>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = new Guid("8faa6acf-197e-4192-a220-a9f5c2c9447c"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 292, DateTimeKind.Local).AddTicks(5800),
                            GenderChar = "F",
                            GenderName = "Female",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderId = new Guid("ab2a5e7e-210a-41e8-bb5e-f9fef61e8ce7"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 293, DateTimeKind.Local).AddTicks(7054),
                            GenderChar = "M",
                            GenderName = "Male",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StudentNr")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentColorId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentClass", b =>
                {
                    b.Property<Guid>("StudentClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeInt")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentClassId");

                    b.ToTable("StudentClasses");

                    b.HasData(
                        new
                        {
                            StudentClassId = new Guid("db9848aa-003d-4a53-8081-7fead75e476c"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2293),
                            DisplayName = "8A",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("f4afb68c-a064-4ecc-b04c-6e9641c6f564"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2314),
                            DisplayName = "8B",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("dfa1abf2-10ef-4484-8242-32aa13caa556"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2317),
                            DisplayName = "8C",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("ac78a578-3a67-4c1a-b013-59a314d453b9"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2320),
                            DisplayName = "8D",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("9a9f835b-0bf2-4139-9905-58bd1dfee70b"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2322),
                            DisplayName = "8E",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("ee81aa6c-8083-4b3f-9d7a-438bbc3aa831"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2324),
                            DisplayName = "8F",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("4b081e7e-3b34-4927-82b4-3c2fd72469c6"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2326),
                            DisplayName = "8G",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("2d2d36e3-79b4-4861-a199-f60e73382d4e"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2328),
                            DisplayName = "9A",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("f791e3d8-96e2-4cdd-b259-696818b3180f"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2330),
                            DisplayName = "9B",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("5176eeaa-9449-4aa6-8c54-88c50539c7db"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2335),
                            DisplayName = "9C",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("b98b791a-2155-4f16-a7f3-7690abbbfd65"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2337),
                            DisplayName = "9D",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("10e327d1-5259-4a08-b4ce-3e5d7f923dbb"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2339),
                            DisplayName = "9E",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("c7af6bfd-1c4c-4aa9-9cef-4ebe2520900d"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2341),
                            DisplayName = "9F",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("4c26b9f2-d4c4-4258-a15a-ecccad140ec8"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2343),
                            DisplayName = "9G",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("944fdfb5-8c0b-4970-b2c9-979d48dcdc2d"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2344),
                            DisplayName = "10A",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("14d20394-76a8-4c07-b39e-ece456bc1fbc"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2346),
                            DisplayName = "10B",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("a785b27f-060c-4a6f-acaf-9fede35872d4"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2348),
                            DisplayName = "10C",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("06c70230-4a32-4a90-aaa6-1d0f6541a920"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2352),
                            DisplayName = "10D",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("032271cb-e615-4eb2-9eb2-5ec2aa35cee8"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2354),
                            DisplayName = "10E",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("73a64744-7c85-47e5-983c-51809f626fa8"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2357),
                            DisplayName = "10F",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("72c8e048-2211-4ba9-bd6b-f45e88bd61d4"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2360),
                            DisplayName = "10G",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("cb3e7208-8039-4b00-b9ff-9b3bb3ac47fd"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2362),
                            DisplayName = "11A",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("9cc165a8-bc5c-48b4-808c-19720a9f0730"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2364),
                            DisplayName = "11B",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("de70aab4-4e8a-4233-aafd-ebf4545ef9dc"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2366),
                            DisplayName = "11C",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("24ccbb69-ec1c-45b6-88ae-86db565dee5a"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2368),
                            DisplayName = "11D",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("41ce67d8-1a8e-4a57-a12c-ae48068ed824"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2371),
                            DisplayName = "11E",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("944806c4-5d1b-427a-8894-cd13bb095a8c"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2373),
                            DisplayName = "11F",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("fd86af7f-388f-4e85-a61e-6f8acf5cdf48"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2375),
                            DisplayName = "11G",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("8731d0a9-c31c-4518-9998-e52b0bad421b"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2377),
                            DisplayName = "12A",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("40f22b1f-ae37-41d1-aaff-546be3f22e72"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2379),
                            DisplayName = "12B",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("aebd6abb-883b-4b6a-b378-98fae92037f1"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2381),
                            DisplayName = "12C",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("51630980-8f92-4bcf-862b-9dca324c2254"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2383),
                            DisplayName = "12D",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("2376a7c9-3004-4ec9-b3f4-157f47da4ebd"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2385),
                            DisplayName = "12E",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("cb1f601e-2342-4ce3-87bd-f4a95f03a39d"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2389),
                            DisplayName = "12F",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("76d394bb-24b7-49ff-a848-7608828d6073"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(2391),
                            DisplayName = "12G",
                            GradeInt = 12,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentColor", b =>
                {
                    b.Property<Guid>("StudentColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentColorId");

                    b.ToTable("StudentColors");

                    b.HasData(
                        new
                        {
                            StudentColorId = new Guid("8849d6cb-049e-42a9-982a-4a9ccf78d3f4"),
                            ColorName = "Gold",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(610),
                            IsDeleted = false
                        },
                        new
                        {
                            StudentColorId = new Guid("92720001-99da-463d-8648-4f21612f8740"),
                            ColorName = "Scarlet",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(634),
                            IsDeleted = false
                        },
                        new
                        {
                            StudentColorId = new Guid("277a47ca-4579-42cc-a986-2cf4a2f65feb"),
                            ColorName = "Unassigned",
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(636),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentGroup", b =>
                {
                    b.Property<Guid>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("GroupInt")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentGroupId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            StudentGroupId = new Guid("0a8a57ba-a86e-4e7b-a011-09f6e7352654"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(3825),
                            DisplayName = "G1",
                            GroupChar = "G",
                            GroupInt = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("edb28e68-064d-4c14-9363-669312929cd9"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(3834),
                            DisplayName = "G2",
                            GroupChar = "G",
                            GroupInt = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("980a8b9a-e1c7-482c-8ad3-b19328b64a5f"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(3836),
                            DisplayName = "G3",
                            GroupChar = "G",
                            GroupInt = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("96100943-27a5-4602-8a75-623552fa8d75"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(3838),
                            DisplayName = "G4",
                            GroupChar = "G",
                            GroupInt = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("262c10eb-010e-4db0-9500-64712915ee9d"),
                            DateCreated = new DateTime(2021, 9, 16, 10, 5, 13, 295, DateTimeKind.Local).AddTicks(3840),
                            DisplayName = "G5",
                            GroupChar = "G",
                            GroupInt = 5,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreening", b =>
                {
                    b.Property<Guid>("StudentScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AdmittedSeverPneumonia")
                        .HasColumnType("bit");

                    b.Property<bool>("AnyOfTheFollowingSymptoms")
                        .HasColumnType("bit");

                    b.Property<bool>("AttendHealthFacility14Days")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseContactInfectedPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseContactProbableInfectedPerson")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GeneralSenseWellbeing")
                        .HasColumnType("bit");

                    b.Property<bool>("HighRiskTravel14Days")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QRCodeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScrenningTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SufferFromChronicDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("WearingAMask")
                        .HasColumnType("bit");

                    b.HasKey("StudentScreeningId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentScreening");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreeningTemp", b =>
                {
                    b.Property<Guid>("StudentScreeningTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AdmittedSeverPneumonia")
                        .HasColumnType("bit");

                    b.Property<bool>("AnyOfTheFollowingSymptoms")
                        .HasColumnType("bit");

                    b.Property<bool>("AttendHealthFacility14Days")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseContactInfectedPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseContactProbableInfectedPerson")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("GeneralSenseWellbeing")
                        .HasColumnType("bit");

                    b.Property<bool>("HighRiskTravel14Days")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QRCodeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("RowType")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("ScrenningTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SufferFromChronicDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("WearingAMask")
                        .HasColumnType("bit");

                    b.HasKey("StudentScreeningTempId");

                    b.ToTable("StudentScreeningTemps");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentTemp", b =>
                {
                    b.Property<Guid>("StudentTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("RowType")
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid?>("StudentClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StudentNr")
                        .HasColumnType("int");

                    b.HasKey("StudentTempId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentColorId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("StudentTemps");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Student", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Gender", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentClass", "StudentClass")
                        .WithMany("Students")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentColor", "StudentColor")
                        .WithMany("Students")
                        .HasForeignKey("StudentColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentGroup", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("StudentClass");

                    b.Navigation("StudentColor");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreening", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentTemp", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentClass", "StudentClass")
                        .WithMany()
                        .HasForeignKey("StudentClassId");

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentColor", "StudentColor")
                        .WithMany()
                        .HasForeignKey("StudentColorId");

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");

                    b.Navigation("Gender");

                    b.Navigation("StudentClass");

                    b.Navigation("StudentColor");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Gender", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentClass", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentColor", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentGroup", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
