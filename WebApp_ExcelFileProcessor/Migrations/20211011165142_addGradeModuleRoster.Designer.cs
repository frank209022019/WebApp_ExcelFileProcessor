// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp_ExcelFileProcessor.Data;

namespace WebApp_ExcelFileProcessor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211011165142_addGradeModuleRoster")]
    partial class addGradeModuleRoster
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ba566e0f-3d52-4967-a62c-1965b9f1e251",
                            ConcurrencyStamp = "cefc016d-d4b7-4b88-8639-d55023447999",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1b824f5d-01b1-411b-8e44-5b05003ef81e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7cc1d1fd-7422-4f3f-9087-b045dedd3540",
                            Email = "admin@fileprocessor.co.za",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@FILEPROCESSOR.CO.ZA",
                            NormalizedUserName = "MYUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEF4i9QXtuadbt4ekqFC57tAPFkPA8yghaB/bHwP4nRhAw94o33PGGqZ5oA5kv1fO+A==",
                            PhoneNumber = "0413743172",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "16e7c604-6d81-4590-bf07-c6570e879780",
                            TwoFactorEnabled = false,
                            UserName = "myuser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1b824f5d-01b1-411b-8e44-5b05003ef81e",
                            RoleId = "ba566e0f-3d52-4967-a62c-1965b9f1e251"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Audit", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditId");

                    b.HasIndex("UserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Gender", b =>
                {
                    b.Property<Guid>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = new Guid("c3929ef7-6cd4-4957-a892-7abc21d6ca37"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 809, DateTimeKind.Local).AddTicks(5819),
                            GenderChar = "F",
                            GenderName = "Female",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderId = new Guid("5d484318-ee5f-4ec4-8972-0608a034def2"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 810, DateTimeKind.Local).AddTicks(2402),
                            GenderChar = "M",
                            GenderName = "Male",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.GradeModuleRoster", b =>
                {
                    b.Property<Guid>("GradeModuleRosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("GradeInt")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GradeModuleRosterId");

                    b.HasIndex("ModuleCodeId");

                    b.ToTable("GradeModuleRoster");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.ModuleCode", b =>
                {
                    b.Property<Guid>("ModuleCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleCodeId");

                    b.ToTable("ModuleCodes");

                    b.HasData(
                        new
                        {
                            ModuleCodeId = new Guid("eb81a9e4-d56c-4ebd-8689-7c9be4b8f9b8"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9280),
                            IsDeleted = false,
                            ModuleCodeName = "BASE"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("8bbfbb5b-542a-4d4d-ba86-41a261da64cf"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9570),
                            IsDeleted = false,
                            ModuleCodeName = "MML"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("0eb871ec-b46f-4376-97d7-ef9bfc79ebac"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9579),
                            IsDeleted = false,
                            ModuleCodeName = "LHC"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("047a940e-a670-40cc-8b89-9e6af58916a6"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9581),
                            IsDeleted = false,
                            ModuleCodeName = "AGCLM"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("20a77051-477a-4c07-ad8f-a22c891fd56e"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9589),
                            IsDeleted = false,
                            ModuleCodeName = "ABCP"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("312038b9-3ccd-4f17-8048-2bf9241e23b7"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9591),
                            IsDeleted = false,
                            ModuleCodeName = "ENG"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("ae84a1d8-d278-4ee5-aa9d-08a1cc42747e"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9593),
                            IsDeleted = false,
                            ModuleCodeName = "AFR/XHO"
                        },
                        new
                        {
                            ModuleCodeId = new Guid("ca760eab-ae86-4cea-a880-5ba408fbc955"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 820, DateTimeKind.Local).AddTicks(9597),
                            IsDeleted = false,
                            ModuleCodeName = "LO"
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StudentNr")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentColorId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentClass", b =>
                {
                    b.Property<Guid>("StudentClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeInt")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentClassId");

                    b.ToTable("StudentClasses");

                    b.HasData(
                        new
                        {
                            StudentClassId = new Guid("ba1aafdc-2d2b-4978-beb5-399a711795d3"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2239),
                            DisplayName = "8A",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("2da4c75d-37da-4593-a8e4-fa8ed8caf8d6"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2249),
                            DisplayName = "8B",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("7720b4f4-d387-4e12-945d-84b78781a568"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2260),
                            DisplayName = "8C",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("a7383d26-e3e1-4334-8d07-be5c12e1cc3c"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2262),
                            DisplayName = "8D",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("267e12dc-f1a5-4dc5-99b5-660aa61ce3b9"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2308),
                            DisplayName = "8E",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("37951335-908d-47a3-98c1-5ad2fc95b8f3"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2310),
                            DisplayName = "8F",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("8f89643f-ce71-40fc-8814-eaa00f5a7f3c"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2312),
                            DisplayName = "8G",
                            GradeInt = 8,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("b1000056-35d9-4c11-90c8-f0ec82eae7ef"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2313),
                            DisplayName = "9A",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("c34abd03-8a04-466c-9052-4fb8084550ef"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2315),
                            DisplayName = "9B",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("19d86afc-82f7-4756-a225-34e75fc4354d"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2316),
                            DisplayName = "9C",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("185fdb6b-4ec6-4755-812d-1b3951dba7b6"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2320),
                            DisplayName = "9D",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("520a81d6-d18d-4c61-bdd8-f3722c458df7"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2322),
                            DisplayName = "9E",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("3c0c4470-6f39-4d0f-8170-bec8208246c2"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2323),
                            DisplayName = "9F",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("2f6e8b2e-55cb-4014-ac44-28bbf7a76e34"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2325),
                            DisplayName = "9G",
                            GradeInt = 9,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("253b497b-b36b-47aa-8918-094ce49f02b9"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2326),
                            DisplayName = "10A",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("70944d86-bac1-493b-a410-d7d7d2eb57de"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2330),
                            DisplayName = "10B",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("dcb29f3e-1d51-4c45-81aa-3f5caab4a9ac"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2332),
                            DisplayName = "10C",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("6095a2f5-37e8-4c85-85ea-de217c8193ae"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2334),
                            DisplayName = "10D",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("71364c49-c81f-423d-8bfe-a8d8196c4f7b"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2338),
                            DisplayName = "10E",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("bd8b0410-883d-437f-bcf5-b44f236ad638"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2340),
                            DisplayName = "10F",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("88cb6bbd-0e85-4fe1-a551-c8e57287261f"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2342),
                            DisplayName = "10G",
                            GradeInt = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("8137bb5f-6c5c-4284-a88f-e19e9bcfb15b"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2343),
                            DisplayName = "11A",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("0e8c6d3b-69ca-45db-932e-f122a09df30d"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2345),
                            DisplayName = "11B",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("cc7e0b29-6002-43ff-8f82-d12200fea3d7"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2346),
                            DisplayName = "11C",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("8ecdca64-342d-4c28-848e-6a8adfb2b6c8"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2348),
                            DisplayName = "11D",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("a0afe2e4-2151-4c9e-b6a2-a1cd7f1e0069"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2349),
                            DisplayName = "11E",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("2573fb00-b1be-41b9-8295-53320183b056"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2352),
                            DisplayName = "11F",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("76a0943f-e97f-471a-bf4c-c6fdd5ab1ed6"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2354),
                            DisplayName = "11G",
                            GradeInt = 11,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("a0308417-1ba4-4e4a-979e-bc9eb7af5d16"),
                            ClassChar = "A",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2356),
                            DisplayName = "12A",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("15efb8ef-a6b3-4933-add0-e4a732217186"),
                            ClassChar = "B",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2357),
                            DisplayName = "12B",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("b25b3de8-11ff-4fec-917a-2d6dadfe7c86"),
                            ClassChar = "C",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2359),
                            DisplayName = "12C",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("41d330ef-8fd8-42a8-bd18-c9503ea4e9a6"),
                            ClassChar = "D",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2361),
                            DisplayName = "12D",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("33b63700-b0f3-4acb-bb5b-e8e3d9d18e0e"),
                            ClassChar = "E",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2362),
                            DisplayName = "12E",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("4987caf3-92a5-4424-9776-7a070b482928"),
                            ClassChar = "F",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2364),
                            DisplayName = "12F",
                            GradeInt = 12,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentClassId = new Guid("0b293f80-b0a7-4bd7-8ec4-3c21868fe4ca"),
                            ClassChar = "G",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(2367),
                            DisplayName = "12G",
                            GradeInt = 12,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentColor", b =>
                {
                    b.Property<Guid>("StudentColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentColorId");

                    b.ToTable("StudentColors");

                    b.HasData(
                        new
                        {
                            StudentColorId = new Guid("1bc38b7f-d9fe-44e2-9910-e3839d111b0b"),
                            ColorName = "Gold",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(746),
                            IsDeleted = false
                        },
                        new
                        {
                            StudentColorId = new Guid("d585dda2-9be9-4af4-a71d-957052fc0a1c"),
                            ColorName = "Scarlet",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(936),
                            IsDeleted = false
                        },
                        new
                        {
                            StudentColorId = new Guid("ab063519-ce8c-45b7-bcdd-da8cd701e665"),
                            ColorName = "Unassigned",
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(938),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentGroup", b =>
                {
                    b.Property<Guid>("StudentGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupChar")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("GroupInt")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentGroupId");

                    b.ToTable("StudentGroups");

                    b.HasData(
                        new
                        {
                            StudentGroupId = new Guid("1e42a78e-621e-45fe-bb8b-18ede62f420b"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(3629),
                            DisplayName = "G1",
                            GroupChar = "G",
                            GroupInt = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("9107ac53-41f3-44da-a4a6-c447d88d0168"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(3639),
                            DisplayName = "G2",
                            GroupChar = "G",
                            GroupInt = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("f826c40a-7293-4b1d-8ee4-d3a763b06fe9"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(3641),
                            DisplayName = "G3",
                            GroupChar = "G",
                            GroupInt = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("95acb8c2-5d1b-4a6a-a874-1173be57fca0"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(3643),
                            DisplayName = "G4",
                            GroupChar = "G",
                            GroupInt = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            StudentGroupId = new Guid("523bd6a8-8e0d-4053-9e6f-00476d040179"),
                            DateCreated = new DateTime(2021, 10, 11, 18, 51, 41, 811, DateTimeKind.Local).AddTicks(3644),
                            DisplayName = "G5",
                            GroupChar = "G",
                            GroupInt = 5,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreening", b =>
                {
                    b.Property<Guid>("StudentScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmittedSeverPneumonia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnyOfTheFollowingSymptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttendHealthFacility14Days")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloseContactInfectedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloseContactProbableInfectedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralSenseWellbeing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighRiskTravel14Days")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QRCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScreeningTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SufferFromChronicDisease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WearingAMask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentScreeningId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentScreening");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreeningTemp", b =>
                {
                    b.Property<Guid>("StudentScreeningTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmittedSeverPneumonia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnyOfTheFollowingSymptoms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttendHealthFacility14Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloseContactInfectedPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloseContactProbableInfectedPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralSenseWellbeing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HighRiskTravel14Days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QRCodeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("RowType")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("ScreeningTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SufferFromChronicDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WearingAMask")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentScreeningTempId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentScreeningTemps");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentTemp", b =>
                {
                    b.Property<Guid>("StudentTempId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("RowType")
                        .HasColumnType("nvarchar(1)");

                    b.Property<Guid?>("StudentClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StudentNr")
                        .HasColumnType("int");

                    b.HasKey("StudentTempId");

                    b.HasIndex("GenderId");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentColorId");

                    b.HasIndex("StudentGroupId");

                    b.ToTable("StudentTemps");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Audit", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.GradeModuleRoster", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.ModuleCode", "ModuleCode")
                        .WithMany()
                        .HasForeignKey("ModuleCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleCode");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Student", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Gender", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentClass", "StudentClass")
                        .WithMany("Students")
                        .HasForeignKey("StudentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentColor", "StudentColor")
                        .WithMany("Students")
                        .HasForeignKey("StudentColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentGroup", "StudentGroup")
                        .WithMany("Students")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("StudentClass");

                    b.Navigation("StudentColor");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreening", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentScreeningTemp", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentTemp", b =>
                {
                    b.HasOne("WebApp_ExcelFileProcessor.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentClass", "StudentClass")
                        .WithMany()
                        .HasForeignKey("StudentClassId");

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentColor", "StudentColor")
                        .WithMany()
                        .HasForeignKey("StudentColorId");

                    b.HasOne("WebApp_ExcelFileProcessor.Models.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId");

                    b.Navigation("Gender");

                    b.Navigation("StudentClass");

                    b.Navigation("StudentColor");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.Gender", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentClass", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentColor", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApp_ExcelFileProcessor.Models.StudentGroup", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
